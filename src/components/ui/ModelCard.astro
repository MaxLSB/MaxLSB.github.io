---
interface Props {
  name: string;
  description: string;
  url: string;
  modelType?: string;
  likes: number;
  downloads: number;
  dataType: string;
}

const { name, description, url, modelType, likes, downloads, dataType } = Astro.props;

// Determine which logo to use based on the model name
const getLogoPath = (modelName: string) => {
  if (modelName.startsWith('kurakurai/')) {
    return '/images/kurakurai-logo.png';
  } else if (modelName.startsWith('MaxLSB/')) {
    return '/images/MaxLSB-logo.png';
  }
  return null;
};

const logoPath = getLogoPath(name);
---

<article class="model-card" data-type={dataType}>
  <div class="model-content">
    {logoPath && (
      <div class="model-logo">
        <img src={logoPath} alt={`${name.split('/')[0]} logo`} />
      </div>
    )}
    <div class="model-main">
      <h3 class="model-name">
        <a href={url} target="_blank" rel="noopener noreferrer">{name}</a>
      </h3>
      <div class="model-meta">
        {modelType && <span class="model-type">{modelType}</span>}
        <div class="stats">
          <span class="likes">
            <svg class="heart-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
            </svg>
            <span class="likes-count">{likes.toLocaleString()}</span>
          </span>
          <span class="downloads">
            <svg class="download-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
              <polyline points="7,10 12,15 17,10"/>
              <line x1="12" y1="15" x2="12" y2="3"/>
            </svg>
            <span class="downloads-count">{downloads.toLocaleString()}</span>
          </span>
        </div>
      </div>
    </div>
  </div>
</article>


<style>
  .model-card {
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 0.75rem 1rem;
    background: var(--bg-color);
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .model-card:hover {
    border-color: var(--link-color);
    background: var(--hover-bg);
  }

  .model-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .model-logo {
    flex-shrink: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .model-logo img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 0.25rem;
  }

  .model-main {
    flex: 1;
    min-width: 0;
  }

  .model-name {
    margin: 0 0 0.125rem 0;
    font-size: var(--text-sm);
    font-weight: 500;
    line-height: 1.3;
  }

  .model-name a {
    color: var(--text-color);
    text-decoration: none;
  }

  .model-name a:hover {
    color: var(--link-color);
  }

  .model-meta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
    font-size: var(--text-sm);
    color: var(--text-muted);
  }

  .model-type {
    font-size: var(--text-xs);
    color: var(--text-muted);
    font-weight: 400;
  }

  .stats {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .likes, .downloads {
    font-size: var(--text-xs);
    color: var(--text-muted);
    font-weight: 400;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .heart-icon, .download-icon {
    color: var(--text-muted);
    flex-shrink: 0;
  }

  .likes-count, .downloads-count {
    font-weight: 500;
  }


  @media (max-width: 640px) {
    .model-content {
      flex-direction: row;
      align-items: center;
      gap: 0.75rem;
    }

    .model-logo {
      width: 1.5rem;
      height: 1.5rem;
    }

    .model-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .stats {
      gap: 0.75rem;
    }
  }
</style>
