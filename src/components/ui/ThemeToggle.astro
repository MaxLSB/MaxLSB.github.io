---
// Theme toggle component
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <circle cx="12" cy="12" r="5"/>
    <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
  </svg>
  <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
  </svg>
</button>

<style>
  .theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color var(--transition-base);
    color: var(--text-color);
    position: relative;
  }

  .theme-toggle:hover {
    background-color: var(--hover-bg);
  }

  .theme-toggle svg {
    transition: opacity var(--transition-base), transform var(--transition-base);
  }

  .sun-icon {
    opacity: 1;
    transform: scale(1);
  }

  .moon-icon {
    opacity: 0;
    transform: scale(0.8);
    position: absolute;
  }

  [data-theme="dark"] .sun-icon {
    opacity: 0;
    transform: scale(0.8);
  }

  [data-theme="dark"] .moon-icon {
    opacity: 1;
    transform: scale(1);
  }
</style>

<script>
  function initThemeToggle() {
    const toggle = document.getElementById('theme-toggle') as HTMLButtonElement;
    const html = document.documentElement;
    
    if (!toggle || !toggle.parentNode) return;
    
    // Remove any existing event listeners to prevent duplicates
    const newToggle = toggle.cloneNode(true) as HTMLButtonElement;
    toggle.parentNode.replaceChild(newToggle, toggle);
    
    // Get saved theme or default to light
    const savedTheme = localStorage.getItem('theme') || 'light';
    html.setAttribute('data-theme', savedTheme);
    
    newToggle.addEventListener('click', (e) => {
      e.preventDefault();
      const currentTheme = html.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      console.log('Current theme:', currentTheme, 'Switching to:', newTheme);
      
      html.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Temporary visual feedback
      newToggle.style.backgroundColor = newTheme === 'dark' ? '#333' : '#f0f0f0';
      setTimeout(() => {
        newToggle.style.backgroundColor = '';
      }, 200);
      
      console.log('Theme changed to:', newTheme, 'HTML attribute:', html.getAttribute('data-theme'));
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeToggle);
  } else {
    initThemeToggle();
  }
  
  // Re-initialize on view transitions
  document.addEventListener('astro:page-load', initThemeToggle);
</script>
