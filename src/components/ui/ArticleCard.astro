---
interface Props {
  title: string;
  description?: string;
  url: string;
  date?: Date;
  tags?: string[];
  additionalLinks?: Array<{label: string, url: string}>;
}

const { title, description, url, date, tags, additionalLinks } = Astro.props;
import { formatDate } from "../../utils/date";
---

<article>
  <div class="title-row">
    <a href={url}>{title}</a>
    {date && <time datetime={date.toISOString()}>{formatDate(date)}</time>}
  </div>
  <p class="muted-text">{description}</p>
  {
    additionalLinks && additionalLinks.length > 0 && (
      <div class="additional-links">
        {additionalLinks.map((link) => (
          <a href={link.url} target="_blank" rel="noopener noreferrer" class="link-button">
            {link.label}
          </a>
        ))}
      </div>
    )
  }
  {
    tags && (
      <div class="tags">
        {tags.map((tag) => (
          <span>{tag}</span>
        ))}
      </div>
    )
  }
</article>

<style>
  .title-row {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    gap: 1rem;
  }

  .title-row a {
    font-size: var(--text-lg);
    text-decoration: none;
    color: var(--text-color);
  }

  .title-row a:hover {
    color: var(--link-color);
  }

  .tags {
    display: flex;
    gap: 0.75rem;
    margin-top: 0.5rem;
  }

  .additional-links {
    display: flex;
    gap: 0.75rem;
    margin: 0.75rem 0;
  }

  .link-button {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    font-size: var(--text-sm);
    text-decoration: none;
    color: var(--link-color);
    border: 1px solid var(--link-color);
    border-radius: 0.375rem;
    transition: all 0.2s ease;
  }

  .link-button:hover {
    background-color: var(--link-color);
    color: var(--bg-color);
  }

  .tags {
    display: flex;
    gap: 0.75rem;
    margin-top: 0.5rem;
  }

  .tags span {
    font-size: var(--text-xs);
    opacity: 0.5;
  }
</style>
